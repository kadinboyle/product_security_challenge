#!/usr/bin/env node

var logger = require('../logging').logger;
var app = require('../app');
var debug = require('debug')('product-security-challenge:server');
var http = require('http');
var port = normalizePort(process.env.PORT || '3000');
var host = process.env.LISTEN_HOST || "localhost";
app.set('port', port);
var server = http.createServer(app);

server.listen(port, host);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  logger.log(`Server listening on ${addr.address}:${addr.port}`);
  InitDB();
}

function InitDB(){
  const sqlite3 = require('sqlite3').verbose()
  var db = new sqlite3.Database('data.db', sqlite3.OPEN_READWRITE | sqlite3.OPEN_CREATE)

  db.serialize(function () {
    db.run('CREATE TABLE IF NOT EXISTS users (username TEXT PRIMARY KEY, password_hash TEXT NOT NULL, account_locked TEXT DEFAULT "FALSE", failed_login_counter INTEGER DEFAULT 0)')
  })

  db.close()
}
